package strings;
import java.util.*;

public class string_manipulation {
	static void count_characters(String s) {
		int count=0;
		for(int i=0;i<s.length();i++)
		{
			if(s.charAt(i)!=' ')
				count++;
		}
		System.out.println("no of characters for string "+s+" is "+count);
		
		
	}
	static void count_punctuation(String s)
	{
		int count=0;
		for(int i=0;i<s.length();i++)
		{
			if(s.charAt(i)=='!'||s.charAt(i)=='.'||s.charAt(i)==','||s.charAt(i)=='?'||s.charAt(i)==';'||s.charAt(i)=='/')
				count++;
		}
		System.out.println("no of punctuation for string "+s+" is "+count);
		
	}
	static void anagrams(String s1,String s2)
	{
		s1=s1.replaceAll("//s", "").toLowerCase();
		s2=s2.replaceAll("//s", "").toLowerCase();
		if (s1.length()!=s2.length())
			System.out.println("Not anagrams");
		else {
		char[] s1Array=s1.toCharArray();
		char[] s2Array=s2.toCharArray();
		Arrays.sort(s1Array);
		Arrays.sort(s2Array);
		if(Arrays.equals(s1Array, s2Array)) 
			System.out.println("both strings are anagrams");
		else
			System.out.println("both strings are not  anagrams");
			
		}
	}
	static void dividestr(String s,int n)
	{
		int temp=0;
		int char_count=s.length()/n;
		String [] str1=new String[n];
		if (s.length()%n!=0)
		{
			System.out.println("String divison not possible");
		}
		else {
			for(int i=0;i<s.length();i=i+char_count)
			{
				String part=s.substring(i,i+char_count);
				str1[temp]=part;
				temp++;
			}
			for(int i=0;i<str1.length;i++)
			{
				System.out.println(str1[i]);
			}
		}
		
		
		
	}
	static void count_vowel_consonant(String s)
	{
		int v_count=0,c_count=0;
		s=s.toLowerCase();
		for(int i=0;i<s.length();i++)
		{
			if(s.charAt(i)=='a'||s.charAt(i)=='e'||s.charAt(i)=='i'||s.charAt(i)=='o'||s.charAt(i)=='u')
				v_count++;
			else
				c_count++;
		}
		System.out.println("no of vowels for string "+s+" are "+v_count);
		System.out.println("no of consonants for string "+s+" are "+c_count);
		
	}
	static void subset_str(String s)
	{
		String sub;
		int i,c,length;
		length = s.length();  
	      System.out.println("Substrings of \""+s+"\" are:");
	     
	      for (c = 0; c < length; c++)
	      {
	         for(i = 1; i <= length - c; i++)
	         {
	            sub = s.substring(c, c+i);
	            System.out.println(sub);
	         }
	      }
	}
	static void permut(String a,int i, int j)
	{
		 char[] b =a.toCharArray();    
	        char ch;    
	        ch = b[i];    
	        b[i] = b[j];    
	        b[j] = ch;    
	        System.out.println(String.valueOf(b)); 
	}
	static void remove_whi(String s1)
	{
		String result = s1.replaceAll("\\s", "");
	      System.out.println("\nThe string after replacing white spaces: " + result);
	}
	static void ul_and_lu(String s1)
	{
		System.out.println("Lowercase is "+s1.toLowerCase());
		System.out.println("Upper case is "+s1.toUpperCase());
	}
	static void space_replace(String s1,String rc)
	{
		s1.replace(" ",rc);
		System.out.println("After replacement the string is "+s1);
	}
	static void palindrome_str(String str)
	{
		String reverseStr = "";
	    
	    int strLength = str.length();

	    for (int i = (strLength - 1); i >=0; --i) {
	      reverseStr = reverseStr + str.charAt(i);
	    }

	    if (str.toLowerCase().equals(reverseStr.toLowerCase())) {
	      System.out.println(str + " is a Palindrome String.");
	    }
	    else {
	      System.out.println(str + " is not a Palindrome String.");   
	}
	}
	    static void rotation_another(String str1,String str2)
	    {
	    	
	        String s3 = str1.concat(str1);
	        if(s3.contains(str2)) {
	           System.out.println("str1 is rotation of str2");
	        } else {
	           System.out.println("str1 is not rotation of str2");
	        }
	    }
	    static void max_min_occurence(String str)
	    {
	    	  
	        int[] freq = new int[str.length()];  
	        char minChar = str.charAt(0), maxChar = str.charAt(0);  
	        int i, j, min, max;          
	          
	          
	        char string[] = str.toCharArray();  
	          
	          
	        for(i = 0; i < string.length; i++) {  
	            freq[i] = 1;  
	            for(j = i+1; j < string.length; j++) {  
	                if(string[i] == string[j] && string[i] != ' ' && string[i] != '0') {  
	                    freq[i]++;  
	                      
	                      
	                    string[j] = '0';  
	                }  
	            }  
	        }  
	          
	          
	        min = max = freq[0];  
	        for(i = 0; i <freq.length; i++) {  
	              
	              
	            if(min > freq[i] && freq[i] != '0') {  
	                min = freq[i];  
	                minChar = string[i];  
	            }  
	             
	            if(max < freq[i]) {  
	                max = freq[i];  
	                maxChar = string[i];  
	            }  
	        }  
	          
	        System.out.println("Minimum occurring character: " + minChar);  
	        System.out.println("Maximum occurring character: " + maxChar);  
	    }  
	    public static String lcp(String s, String t){  
	        int n = Math.min(s.length(),t.length());  
	        for(int i = 0; i < n; i++){  
	            if(s.charAt(i) != t.charAt(i)){  
	                return s.substring(0,i);  
	            }  
	        }  
	        return s.substring(0,n);  
	    }  
	    	
	    
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
//		String str=sc.nextLine();
//		count_characters(str);
//		count_punctuation(str);
//		anagrams("tof","fotg");
//		dividestr("aaabbacc",3);
//		count_vowel_consonant("srinivas");
//		subset_str("srinivas");
//		remove_whi("Java programming is fun to learn");
//		space_replace("srinivas was something",'-');
		
//		this is the driver code for longest commmon sequence in a string
//		String str = "acbdfghybdf";  
//        String lrs="";  
//        int n = str.length();  
//        for(int i = 0; i < n; i++){  
//            for(int j = i+1; j < n; j++){  
//                //Checks for the largest common factors in every substring  
//                String x = lcp(str.substring(i,n),str.substring(j,n));  
//                //If the current prefix is greater than previous one   
//                //then it takes the current one as longest repeating sequence  
//                if(x.length() > lrs.length()) lrs=x;    
//            }  
//        }  
//        System.out.println("Longest repeating sequence: "+lrs);  
//      
		
		
	}

}
